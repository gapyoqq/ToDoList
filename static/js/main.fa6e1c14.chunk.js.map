{"version":3,"sources":["serviceWorker.ts","api/tasks-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","state/app-reducer.ts","state/tasks-reducer.ts","Todolist.tsx","api/todolist-api.ts","state/todolists-reducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","newTaskTitle","setNewTaskTitle","error","setError","TextField","helperText","variant","label","onKeyPress","e","trim","key","addItem","value","onChange","currentTarget","IconButton","color","onClick","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","OnChangeCallback","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","tasksAPI","todolistId","get","post","taskId","delete","model","put","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","task","id","todoListId","className","status","Completed","Checkbox","newIsDoneValue","checked","changeStatus","New","removeTask","Delete","initialState","setAppStatusAC","type","Todolist","dispatch","useDispatch","useEffect","then","res","tasks","data","items","setTasksAC","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","addTask","changeTodolistTitle","newTitle","tasksForTodoList","filter","t","removeTodolist","map","Button","todoListAPI","addTodolistAC","v1","Alert","elevation","ErrorSnackbar","useSelector","state","app","setOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","todos","setTodolistsAC","getState","currentTask","find","deadline","description","priority","startDate","changeTaskStatusAC","updateTaskStatusTC","changeTaskTitleAC","changeTaskTitleTC","removeTaskAC","deleteTaskTC","taskTitle","item","addTaskTC","changeTodolistFilterAC","removeTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","todoLists","AppBar","position","Toolbar","edge","aria-label","Typography","LinearProgress","Container","Grid","container","style","padding","spacing","tl","Paper","rootReducer","combineReducers","action","stateCopy","todolist","filteredTasks","newTasks","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fa6e1c14.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {ResponseType} from \"./todolist-api\";\r\n\r\nconst instance = axios.create({\r\n        baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n        withCredentials: true,\r\n        headers: {\r\n            'API-KEY': '2ab06da3-ea5f-4726-b6a5-ae0f930da8a3'\r\n        },\r\n    }\r\n)\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress= 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype GetTasksResponseType = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType []\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n        const [newTaskTitle, setNewTaskTitle] = useState('')\r\n        const [error, setError] = useState<string | null>(null)\r\n        const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setNewTaskTitle(e.currentTarget.value)\r\n        }\r\n        const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n            if (error !== null) {\r\n                setError(null)\r\n            }\r\n            if (newTaskTitle.trim() !== '' && e.key == 'Enter') {\r\n                props.addItem(newTaskTitle.trim())\r\n                setNewTaskTitle('')\r\n            }\r\n        }\r\n        const addTask = () => {\r\n            if (error !== null) {\r\n                setError(null)\r\n            }\r\n            if (newTaskTitle.trim() !== '') {\r\n                props.addItem(newTaskTitle.trim())\r\n                setNewTaskTitle('')\r\n            } else {\r\n                setError('Title is required')\r\n            }\r\n        }\r\n\r\n        return <div>\r\n            <TextField\r\n                helperText={error}\r\n                variant={\"outlined\"}\r\n                label={'Type value'}\r\n                error={!!error}\r\n                onKeyPress={onKeyPressHandler}\r\n                value={newTaskTitle}\r\n                onChange={onNewTitleChangeHandler}/>\r\n            <IconButton\r\n                color={\"primary\"}\r\n                onClick={addTask}>\r\n                <AddIcon/>\r\n            </IconButton>\r\n        </div>\r\n    }\r\n)\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    OnChangeCallback:(newValue: string) => void\r\n}\r\n\r\nexport const  EditableSpan = React.memo ((props: EditableSpanPropsType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title,setTitle] = useState(\"\")\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.OnChangeCallback(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n\r\n    return editMode\r\n        ? <TextField onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus value={title}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})\r\n\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/tasks-api\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    task: TaskType\r\n    todoListId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onRemoveHandler = () => {\r\n        props.removeTask(props.task.id, props.todoListId)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeStatus(props.task.id, newIsDoneValue? TaskStatuses.Completed : TaskStatuses.New, props.todoListId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todoListId)\r\n    }, [props.task.id, props.changeTaskTitle, props.todoListId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            onChange={onChangeStatusHandler}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n        />\r\n        <EditableSpan OnChangeCallback={onChangeTitleHandler} title={props.task.title}/>\r\n        <IconButton onClick={onRemoveHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type ErrorType = null | 'Error'\r\n\r\n\r\ntype InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    error: ErrorType\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'loading',\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return  {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    status\r\n} as const)\r\n\r\n\r\nexport const setAppErrorAC = (error: ErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>\r\n","import {Dispatch} from \"redux\";\r\nimport {tasksAPI, TaskStatuses, TaskType} from \"../api/tasks-api\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists-reducer\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\n\r\n\r\nexport type  ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof addTaskAC>\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            let tasks = stateCopy[action.todolistId]\r\n            let filteredTasks = tasks.filter((t) => t.id !== action.taskId\r\n            )\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const task = stateCopy[action.task.todoListId]\r\n            const newTasks = [action.task, ...task]\r\n            stateCopy[action.task.todoListId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state}\r\n            let tasks = state[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            return stateCopy\r\n\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todos.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({\r\n    type: \"ADD-TASK\",\r\n    task\r\n} as const)\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => ({\r\n    type: \"CHANGE-TASK-STATUS\",\r\n    taskId,\r\n    status,\r\n    todolistId\r\n} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({\r\n    type: \"CHANGE-TASK-TITLE\",\r\n    taskId, title, todolistId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => (\r\n    {type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n\r\n\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            let tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const deleteTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    tasksAPI.deleteTask(taskId, todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(taskId, taskId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    tasksAPI.createTask(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (taskId: string, status: TaskStatuses, todolistId: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const tasks = getState().tasks[todolistId]\r\n    const currentTask = tasks.find((t) => {\r\n        return t.id === taskId\r\n    })\r\n    if (currentTask) {\r\n        tasksAPI.updateTask(todolistId, taskId, {\r\n            status: status,\r\n            deadline: currentTask.deadline,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            title: currentTask.title,\r\n            startDate: currentTask.startDate\r\n        })\r\n            .then((res) => {\r\n                dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleTC = (taskId: string, todolistId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const tasks = getState().tasks[todolistId]\r\n    const currentTask = tasks.find((t) => {\r\n        return t.id === taskId\r\n    })\r\n    if (currentTask) {\r\n        tasksAPI.updateTask(todolistId, taskId, {\r\n            status: currentTask.status,\r\n            deadline: currentTask.deadline,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            title: title,\r\n            startDate: currentTask.startDate\r\n        })\r\n            .then((res) => {\r\n                dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {FilterValuesType, fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses, TaskType} from \"./api/tasks-api\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TaskType[]\r\n    changeFilter: (todolistId: string, filter: FilterValuesType) => void\r\n    addTask: (newTaskTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'all')\r\n    }, [props.changeFilter, props.id])\r\n\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'active')\r\n    }, [props.changeFilter, props.id])\r\n\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'completed')\r\n    }, [props.changeFilter, props.id])\r\n\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    let tasksForTodoList = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} OnChangeCallback={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        {\r\n            tasksForTodoList.map(t => <Task changeStatus={props.changeStatus}\r\n                                       changeTaskTitle={props.changeTaskTitle}\r\n                                       removeTask={props.removeTask}\r\n                                       task={t}\r\n                                       todoListId={props.id}\r\n                                       key={t.id}/>\r\n            )\r\n        }\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"contained\" : 'text'}\r\n                    onClick={onAllClickHandler}>All</Button>\r\n            <Button\r\n                variant={props.filter === 'active' ? \"contained\" : 'text'}\r\n                color={\"primary\"}\r\n                onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button\r\n                variant={props.filter === 'completed' ? \"contained\" : 'text'}\r\n                color={\"secondary\"}\r\n                onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import axios from 'axios'\r\nimport {TodolistDataType, TodolistDomainType} from \"../state/todolists-reducer\";\r\n\r\nconst instance = axios.create({\r\n        baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n        withCredentials: true,\r\n        headers: {\r\n            'API-KEY': '2ab06da3-ea5f-4726-b6a5-ae0f930da8a3'\r\n        },\r\n    }\r\n)\r\n\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\n\r\nexport const todoListAPI = {\r\n    getTodoLists() {\r\n        return instance.get<TodolistDomainType[]>('todo-lists')\r\n    },\r\n    createTodoList(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistDataType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodoList(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoList(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`/todo-lists/${todolistId}`, {title})\r\n    }\r\n}\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {todoListAPI} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FilterValuesType} from \"./tasks-reducer\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\n\r\nexport type TodolistDataType = {\r\n    id: string\r\n    title: string,\r\n    addedDate?: string,\r\n    order?: number\r\n}\r\nexport type TodolistDomainType = TodolistDataType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type  ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter((t => t.id !== action.id))\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: \"all\"\r\n            },\r\n                ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const stateCopy = [...state]\r\n            const todolist = stateCopy.find(tl => tl.id === action.todolistId)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n            }\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const stateCopy = [...state]\r\n            let todolist = stateCopy.find(tl => tl.id === action.todolistId)\r\n            if (todolist) {\r\n                todolist.filter = action.filter\r\n            }\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todos.map((tl) => {\r\n                return {...tl, filter: 'all'}\r\n            })\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodolistAC = (title: string) => ({type: \"ADD-TODOLIST\", title: title, todolistId: v1()} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => ({\r\n    title, type: \"CHANGE-TODOLIST-TITLE\", todolistId\r\n} as const)\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterValuesType) => ({\r\n    todolistId,\r\n    filter,\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n} as const)\r\nexport const setTodolistsAC = (todos: Array<TodolistDomainType>) => ({type: 'SET-TODOLISTS', todos} as const)\r\n\r\n\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todoListAPI.getTodoLists().then((res) => {\r\n        let todos = res.data\r\n        dispatch(setTodolistsAC(todos))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todoListAPI.createTodoList(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(title))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todoListAPI.deleteTodoList(todolistId)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(todolistId))\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todoListAPI.updateTodoList(todolistId, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(todolistId, title))\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {ErrorType} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType,ErrorType>((state => state.app.error))\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (error === 'Error') {\r\n            return\r\n        }\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !==null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                Error!\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {\r\n    changeTaskTitleAC, addTaskTC, deleteTaskTC,\r\n    FilterValuesType,\r\n    TasksStateType, updateTaskStatusTC, changeTaskTitleTC,\r\n} from \"./state/tasks-reducer\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC, fetchTodolistsTC,\r\n    removeTodolistTC, TodolistDomainType,\r\n} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses, TaskType} from \"./api/tasks-api\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nfunction AppWithRedux() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskStatusTC(taskId, status, todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleTC(taskId, todolistId, title))\r\n    }, [dispatch])\r\n\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(deleteTaskTC(todolistId, id))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((taskTitle: string, todolistId: string) => {\r\n        dispatch(addTaskTC(taskTitle, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todolistId: string, filter: FilterValuesType) => {\r\n\r\n        dispatch(changeTodolistFilterAC(todolistId, filter))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        dispatch(removeTodolistTC(todolistId))\r\n\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, title))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>((state) => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>((state) => state.tasks)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid\r\n                    spacing={3}\r\n                    container>\r\n                    {\r\n                        todoLists.map((tl) => {\r\n                            let tasksForTodoList: Array<TaskType> = tasks[tl.id];\r\n                            return <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        removeTask={removeTask}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodoList}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist} changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }</Grid>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolists-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}